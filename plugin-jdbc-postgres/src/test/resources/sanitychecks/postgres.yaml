id: dlt_to_postgres
namespace: sanitychecks

variables:
  postgres_password: sanity
  postgres_user: test 

tasks:

  - id: port
    type: io.kestra.plugin.core.debug.Return
    format: "{{ randomPort() }}"

  - id: dockerStart
    type: io.kestra.plugin.docker.Run
    containerImage: postgres
    portBindings:
      - "{{ outputs.port.value }}:5432"
    wait: false
    env:
      POSTGRES_PASSWORD: "{{ vars.postgres_password }}"
      POSTGRES_USER: "{{ vars.postgres_user }}"

  - id: sleep
    type: io.kestra.plugin.core.flow.Sleep
    duration: PT5S

  - id: create_table
    type: io.kestra.plugin.jdbc.postgresql.Query
    sql: |
      CREATE SCHEMA sanitychecks;
      CREATE TABLE sanitychecks.test(
        field1 INT,
        field2 INT
      );

  - id: write
    type: io.kestra.plugin.core.storage.Write
    content: |
      field1,field2
      1,2
      3,4
      4,5
    extension: .csv

  - id: copyin
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    from: "{{ outputs.write.uri }}"
    table: sanitychecks.test
    header: true
    delimiter: ','

  - id: query
    type: io.kestra.plugin.jdbc.postgresql.Query
    sql: SELECT * FROM sanitychecks.test;
    fetchType: FETCH


  - id: copyout
    type: io.kestra.plugin.jdbc.postgresql.CopyOut
    format: CSV
    sql: SELECT * FROM sanitychecks.test LIMIT 2
    header: true
    delimiter: ","


  - id: assert
    type: io.kestra.plugin.core.execution.Assert
    conditions:
      - "{{ outputs.copyin.rowCount == 3}}"
      - "{{ outputs.query.rows[0].field1 == 1 }}"
      - "{{ outputs.query.rows[1].field2 == 4 }}"
      - "{{ outputs.copyout.rowCount == 2}}"

finally:
  - id: dockerStop
    type: io.kestra.plugin.docker.Stop
    containerId: "{{ outputs.dockerStart.taskRunner.containerId }}"
    kill: true

  - id: purge
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      username: "{{ vars.postgres_user }}"
      password: "{{ vars.postgres_password }}"
      url: jdbc:postgresql://localhost:{{ outputs.port.value }}/